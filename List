Scenario
There once was a hat. The hat contained no rabbit, but a list of five numbers: 1, 2, 3, 4, and 5.

Your task is to:

write a line of code that prompts the user to replace the middle number in the list with an integer number entered by the user (step 1)
write a line of code that removes the last element from the list (step 2)
write a line of code that prints the length of the existing list (step 3.)

hatList = [1, 2, 3, 4, 5]  # This is an existing list of numbers hidden in the hat.

# Step 1: write a line of code that prompts the user
usernumber = int(input("Enter a number"))
# to replace the middle number with an integer number entered by the user.
hatList[2] = usernumber
# Step 2: write a line of code here that removes the last element from the list.
del hatList[4]
# Step 3: write a line of code here that prints the length of the existing list.
print("Length of list",len(hatList))
print(hatList)

----------------------------------------------------------------------------------------------------------------------------------------
Write a program that reflects these changes and lets you practice with the concept of lists. Your task is to:

step 1: create an empty list named beatles;
step 2: use the append() method to add the following members of the band to the list: John Lennon, Paul McCartney, and George Harrison;
step 3: use the for loop and the append() method to prompt the user to add the following members of the band to the list: Stu Sutcliffe, and Pete Best;
step 4: use the del instruction to remove Stu Sutcliffe and Pete Best from the list;
step 5: use the insert() method to add Ringo Starr to the beginning of the list.

# step 1
beatles = []
print("Step 1:", beatles)

# step 2
beatles.append("John Lennon")
beatles.append("Paul McCartney")
beatles.append("George Harrison")
print("Step 2:", beatles)

# step 3
for i in range(1):
    beatles.append("Stu Sutcliffe")
    beatles.append("Pete Best")
print("Step 3:", beatles)

# step 4
del beatles[3]
del beatles[3]
print("Step 4:", beatles)

# step 5
beatles.insert(3,"Ringo Starr")
print("Step 5:", beatles)


# testing list legth
print("The Fab", len(beatles))

---------------------------------------------------------------------------------------------------------------------------------
Scenario
Imagine a list - not very long, not very complicated, just a simple list containing some integer numbers. Some of these numbers may be repeated, and this is the clue. We don't want any repetitions. We want them to be removed.

Your task is to write a program which removes all the number repetitions from the list. The goal is to have a list in which all the numbers appear not more than once.

Note: assume that the source list is hard-coded inside the code - you don't have to enter it from the keyboard. 
Of course, you can improve the code and add a part that can carry out a conversation with the user and obtain all the data from her/him.

Hint: we encourage you to create a new list as a temporary work area - you don't need to update the list in situ.

We've provided no test data, as that would be too easy. You can use our skeleton instead.

myList = [1, 2, 4, 4, 1, 4, 2, 6, 2, 9]
newList=[]
#
# put your code here
for i in myList:
    if i not in newList:
        newList.append(i)
#
print("The list with unique elements only:")
print(myList)
print(newList)

------------------------------------------------------------------------------------------------------------------------------
Scenario
Your task is to write and test a function which takes one argument (a year) and returns True if the year is a leap year, or False otherwise.

The seed of the function is already sown in the skeleton code in the editor.

Note: we've also prepared a short testing code, which you can use to test your function.

The code uses two lists - one with the test data, and the other containing the expected results. The code will tell you if any of your results are invalid.

def isYearLeap(year):
	if year % 4 != 0:
	    return False
	elif year % 100 != 0:
	    return True
	elif year % 400 == 0:
	    return False
	else:
	    return True


testdata = [1900, 2000, 2016, 1987]
testresults = [False, True, True, False]
for i in range(len(testdata)):
	yr = testdata[i]
	print(yr,"-> ",end="")
	result = isYearLeap(yr)
	if result == testresults[i]:
		print("OK")
	else:
		print("Failed")
  ---------------------------------------------------------------------------------------------------------------------------------
  
  Scenario
Your task is to write and test a function which takes two arguments (a year and a month) 
and returns the number of days for the given month/year pair (while only February is sensitive to the year value, your function should be universal).

The initial part of the function is ready. Now, convince the function to return None if its arguments don't make sense.

Of course, you can (and should) use the previously written and tested function (LAB 4.1.3.6). It may be very helpful. 
We encourage you to use a list filled with the months' lengths. You can create it inside the function - this trick will significantly shorten the code.
def isYearLeap(year):
    if year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False
    else:
        return True
def daysInMonth(year, month):
    if isYearLeap(year):
        if month == 2:
            return 29
        elif month ==1 or month == 3 or month == 5 or month == 7 or month==8 or month == 10 or month == 12:
            return 31
        else:
            return 30


testYears = [1900, 2000, 2016, 1987]
testMonths = [2, 2, 1, 11]
testResults = [28, 29, 31, 30]
for i in range(len(testYears)):
	yr = testYears[i]
	mo = testMonths[i]
	print(yr, mo, "->", end="")
	result = daysInMonth(yr, mo)
	if result == testResults[i]:
		print("OK")
	else:
		print("Failed")
     --------------------------------------------------------------------------------------------------------------
 Scenario
Your task is to write and test a function which takes three arguments (a year, a month, and a day of the month)
and returns the corresponding day of the year, or returns None if any of the arguments is invalid.

Use the previously written and tested functions. Add some test cases to the code. This test is only a beginning.
def isYearLeap(year):
    if year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False
    else:
        return True
def daysInMonth(year, month):
    if isYearLeap(year):
        if month == 2:
            return 29
        elif month ==1 or month == 3 or month == 5 or month == 7 or month==8 or month == 10 or month == 12:
            return 31
        else:
            return 30


def dayOfYear(year, month, day):
    days = 0
    for i in range(1, month + 1):
        days += daysInMonth(year, i)
    return days


print(dayOfYear(2000, 12, 31))

-----------------------------------------------------------------------------------------------------------------
Scenario
A natural number is prime if it is greater than 1 and has no divisors other than 1 and itself.
def isPrime(num):
    val = False
    for n in range(2,num):
        if num%n==0:
            return False
        else :
            val = True
            return val

for i in range(1, 20):
        if isPrime(i + 1):
            print(i + 1, end=" ")
print()
        
